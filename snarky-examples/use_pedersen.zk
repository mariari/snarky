open Extended_lib;

/* This SNARK will prove:

   I know a pedersen preimage of the public input.

   How to run:

   Compute the Pedersen hash by running

   $ dune exec crypto_util/crypto_util.exe pedersen 'hello world'

   where 'hello world' is whatever string you like.

   In this case, the output was

   9538985273985886865080453535327260679290459604164841894520913541179636831883

   Now run
   $ dune exec snarky_cli -- generate-keys snarky-examples/use_pedersen.zk --curve Bn128
   $ dune exec snarky_cli -- prove snarky-examples/use_pedersen.zk 9538985273985886865080453535327260679290459604164841894520913541179636831883

   You will be prompted for the preimage you typed in before. If you enter it, you
   will get your proof.
*/

let preimage_length = 256i;

let pad_to_preimage_length = fun (xs) => {
  let n = List.length(xs);
  if (n > preimage_length) {
    failwith("Too big to be a preimage");
  } ;

  if (n < preimage_length) {
    xs @ List.init(preimage_length - n, fun (_) => { false; });
  } else {
    xs;
  };
};

let get_preimage : unit -> list#256(bool) = fun () => {
  print_endline("Please enter your preimage") ;
  let s = read_line () ;
  pad_to_preimage_length(Blake2.string_to_bool_list(s));
};

// Just an example...
let get_field : unit -> Field.Constant.t = fun () => {
  let s = read_line();
  Field.Constant.of_string(s);
};


let main = fun (expected_output : field, ()) => {
  let params = Pedersen.Params.load("./bn128-params");

  let preimage : list#256(boolean) = Prover {
    get_preimage();
  };

  let actual_output : field = Pedersen.digest_bits(params, preimage);

  Field.Assert.equal(expected_output, actual_output);
};
