/*
  In this tutorial, we'll make a SNARK.
  The SNARK will function as follows:

  Public-input:
    a field element x
  Proves:
    x is a square. In other words,
    "There exists y such that y * y = x."

  The idea of a public input is that it is an *exposed* input
  with respect to which we prove some statement. In this case,
  the statement is that it's a square.

  All other values arising in the course of our computation are
  completely hidden (well, as hidden as they can be) by the
  magic of zero-knowledge.
*/

/* This lets us declare a 'request' to the prover. It says

   "There is a request called 'Get_square_root' which takes a
   field element as an argument and we expect the prover to
   return a field element in response."
*/
request(field) Get_square_root(field);

let prover =
  handler {
    | Get_square_root(x) => {
      let y = Field.sqrt(x);
      respond(Provide(y)) ;
    }
  };

let main = fun (x : field) => {
  /* This bit asks the prover to please give us the square root of x. */
  let y = request { Get_square_root(x); };

  /* Now we check that the prover really has given us the square root of x
     by making an assertion about the value the prover gave us. */
  assert_r1(y, y, x);
};

let main = fun (x : field, ()) => {
  handle(fun () => {main(x);}, prover);
};
