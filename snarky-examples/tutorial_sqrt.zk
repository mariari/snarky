/*
  In this tutorial, we'll make a SNARK.
  The SNARK will function as follows:

  Public-input:
    a field element x
  Proves:
    x is a square. In other words,
    "There exists y such that y * y = x."

  The idea of a public input is that it is an *exposed* input
  with respect to which we prove some statement. In this case,
  the statement is that it's a square.

  All other values arising in the course of our computation are
  completely hidden (well, as hidden as they can be) by the
  magic of zero-knowledge.
*/

let main = fun (x : field, ()) => {
  /* This bit asks the prover to please give us the square root of x,
     and inside of the prover block we have access to extra functions
     in Field, including a square root function. Everything inside of
     the Prover block is not being checked in the SNARK, but is computation
     performed by the prover.
   */
  let y = Prover {
    if (Field.is_square(x)) {
      Field.sqrt(x);
    } else {
      0;
    };
  };

  /* Now we check that the prover really has given us the square root of x
     by making an assertion about the value the prover gave us. */
  assert_r1(y, y, x);
};

